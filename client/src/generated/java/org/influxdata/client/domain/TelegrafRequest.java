/*
 * Influx API Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.influxdata.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import org.influxdata.client.domain.TelegrafRequestAgent;
import org.influxdata.client.domain.TelegrafRequestPlugin;

/**
 * TelegrafRequest
 */

public class TelegrafRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private TelegrafRequestAgent agent = null;

  public static final String SERIALIZED_NAME_PLUGINS = "plugins";
  @SerializedName(SERIALIZED_NAME_PLUGINS)
  @JsonAdapter(TelegrafRequestPluginsAdapter.class)
  private List<TelegrafRequestPlugin> plugins = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION_I_D = "organizationID";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_I_D)
  private String organizationID;

  public TelegrafRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TelegrafRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TelegrafRequest agent(TelegrafRequestAgent agent) {
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @ApiModelProperty(value = "")
  public TelegrafRequestAgent getAgent() {
    return agent;
  }

  public void setAgent(TelegrafRequestAgent agent) {
    this.agent = agent;
  }

  public TelegrafRequest plugins(List<TelegrafRequestPlugin> plugins) {
    this.plugins = plugins;
    return this;
  }

  public TelegrafRequest addPluginsItem(TelegrafRequestPlugin pluginsItem) {
    if (this.plugins == null) {
      this.plugins = new ArrayList<>();
    }
    this.plugins.add(pluginsItem);
    return this;
  }

   /**
   * Get plugins
   * @return plugins
  **/
  @ApiModelProperty(value = "")
  public List<TelegrafRequestPlugin> getPlugins() {
    return plugins;
  }

  public void setPlugins(List<TelegrafRequestPlugin> plugins) {
    this.plugins = plugins;
  }

  public TelegrafRequest organizationID(String organizationID) {
    this.organizationID = organizationID;
    return this;
  }

   /**
   * Get organizationID
   * @return organizationID
  **/
  @ApiModelProperty(value = "")
  public String getOrganizationID() {
    return organizationID;
  }

  public void setOrganizationID(String organizationID) {
    this.organizationID = organizationID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TelegrafRequest telegrafRequest = (TelegrafRequest) o;
    return Objects.equals(this.name, telegrafRequest.name) &&
        Objects.equals(this.description, telegrafRequest.description) &&
        Objects.equals(this.agent, telegrafRequest.agent) &&
        Objects.equals(this.plugins, telegrafRequest.plugins) &&
        Objects.equals(this.organizationID, telegrafRequest.organizationID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, agent, plugins, organizationID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TelegrafRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    plugins: ").append(toIndentedString(plugins)).append("\n");
    sb.append("    organizationID: ").append(toIndentedString(organizationID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public class TelegrafRequestPluginsAdapter implements JsonDeserializer<Object>, JsonSerializer<Object> {
    private final String discriminator = "name";

    public TelegrafRequestPluginsAdapter() {
    }

    @Override
    public Object deserialize(final JsonElement json, final Type typeOfT, final JsonDeserializationContext context) throws JsonParseException {

      List<Object> results = new ArrayList<>();

      for (JsonElement arrayItem: json.getAsJsonArray()){
        JsonObject jsonObject = arrayItem.getAsJsonObject();

        String type = jsonObject.get(discriminator).getAsString();

        results.add(deserialize(type, jsonObject, context));
      }

      return results;
    }

    @Override
    public JsonElement serialize(Object object, Type typeOfSrc, JsonSerializationContext context) {

      return context.serialize(object);
    }

    private Object deserialize(final String type, final JsonElement json, final JsonDeserializationContext context) {

      if ("cpu".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputCpu.class);
      }
      if ("disk".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputDisk.class);
      }
      if ("diskio".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputDiskio.class);
      }
      if ("docker".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputDocker.class);
      }
      if ("file".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputFile.class);
      }
      if ("kubernetes".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputKubernetes.class);
      }
      if ("logparser".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputLogParser.class);
      }
      if ("procstat".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputProcstat.class);
      }
      if ("prometheus".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputPrometheus.class);
      }
      if ("redis".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputRedis.class);
      }
      if ("syslog".equals(type)) {
        return context.deserialize(json, TelegrafPluginInputSyslog.class);
      }
      if ("file".equals(type)) {
        return context.deserialize(json, TelegrafPluginOutputFile.class);
      }
      if ("influxdb_v2".equals(type)) {
        return context.deserialize(json, TelegrafPluginOutputInfluxDBV2.class);
      }

      return context.deserialize(json, Object.class);
    }
  }
}

